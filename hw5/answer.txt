使用链表实现，其中Node存储元数据
表示这一段的长度，下一个段位置，上一个段位置，是否被使用

需要分配时，查询对应的链表，找到对应段
如果不存在，那么分配新的，调用more函数分配并加入链表
然后如果数据段非常大，那么切成两段

需要释放时，将这一段的isUsed置为0,然后和左右两段合并
主要时改变next和size

元数据的后面一个就是实际的指针，返回时+1就是这个道理

实现的三个程序只有cmalloc中有一点不一样，所以我提供了一个通用版可以支持三种
但是注意，复杂度和真正的算法有差距，比如最优可以O(1)查找到malloc的位置
但是我的实现中却需要O(n)，这是由于为了统一化代码而付出的复杂度代价


